{"meta":{"title":"casun","subtitle":"吹牛逼","description":null,"author":"Casun","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-10-30T15:44:23.000Z","updated":"2019-10-30T15:46:07.803Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-10-30T15:42:27.000Z","updated":"2019-10-30T15:43:39.831Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"最大子序列和","slug":"最大子序列和","date":"2019-10-31T03:19:56.000Z","updated":"2019-10-31T03:24:50.526Z","comments":true,"path":"2019/10/31/最大子序列和/","link":"","permalink":"http://yoursite.com/2019/10/31/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/","excerpt":"","text":"最大子序列和题目描述 给出一段序列，选出其中连续且非空的一段使得这段和最大。 方法一 分治法123456789101112131415161718192021222324252627282930313233int divide(int a[],int left,int right)&#123; int mid =(left+right)/2; if(right==left) return a[left]; int max_left_sum=divide(a,left,mid);//左字段最大和 int max_right_sum=divide(a,mid+1,right);//右字段最大和 //处理端点分别在左半段和右半段的情况 int sum=0; int left_sum=-10001; for(int i=mid;i&gt;=left;--i) &#123; sum+=a[i]; if(sum&gt;left_sum) left_sum=sum; &#125; sum=0; int right_sum=-10001; for(int i=mid+1;i&lt;=right;++i) &#123; sum+=a[i]; if(sum&gt;right_sum) right_sum=sum; &#125; int max_mid_sum=left_sum+right_sum; int max=max_mid_sum; if(max&lt;max_left_sum)//求三者最大值 max=max_left_sum; if(max&lt;max_right_sum) max=max_right_sum; return max;&#125; 方法二 动态规划12345678910111213141516int dp(int a[],int n)//状态转移方程 f[i]=max(f[i-1]+a[i],a[i])/***因为若f[i]的值为负数，则f[i+1]的值就是n[i],而n[i]的值不一定比前面的最大字段和数大！**或者n[i]为负数，则f[i]小于f[i-1]!**所以，我们还要再用一个数从1到n再查找一次，才能找出最大数.*/&#123; int ans[200005]=&#123;0&#125;; int sum=-10001; for(int i=0;i&lt;n;i++) &#123; ans[i]=max(ans[i-1]+a[i],a[i]); sum=max(sum,ans[i]); &#125; return sum;&#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"test","slug":"test","date":"2019-10-31T02:51:16.000Z","updated":"2019-10-31T03:02:59.257Z","comments":true,"path":"2019/10/31/test/","link":"","permalink":"http://yoursite.com/2019/10/31/test/","excerpt":"","text":"First title1234function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun(); Second title 这是引用","categories":[{"name":"categories1","slug":"categories1","permalink":"http://yoursite.com/categories/categories1/"}],"tags":[{"name":"tag1","slug":"tag1","permalink":"http://yoursite.com/tags/tag1/"},{"name":"tag2","slug":"tag2","permalink":"http://yoursite.com/tags/tag2/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-30T15:04:19.600Z","updated":"2019-10-30T15:04:19.600Z","comments":true,"path":"2019/10/30/hello-world/","link":"","permalink":"http://yoursite.com/2019/10/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}